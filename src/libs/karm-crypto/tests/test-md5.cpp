#include <karm-crypto/md5.h>
#include <karm-test/macros.h>

namespace Karm::Crypto::Tests {

test$("crypto-md5") {
    auto testCase = [&](Str data, Array<u8, MD5_BYTES> const& expected) -> Res<> {
        auto hash = md5(bytes(data));
        
        expectEq$(hash.len(), expected.len());
        for (usize idx = 0; idx < hash.len(); idx++) {
            expectEq$(hash[idx], expected[idx]);
        }
        return Ok();
    };

    // test vectors from RFC 1321
    try$(testCase("", {
        0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04,
        0xe9, 0x80, 0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e
    }));

    try$(testCase("a", {
        0x0c, 0xc1, 0x75, 0xb9, 0xc0, 0xf1, 0xb6, 0xa8,
        0x31, 0xc3, 0x99, 0xe2, 0x69, 0x77, 0x26, 0x61
    }));

    try$(testCase("abc", {
        0x90, 0x01, 0x50, 0x98, 0x3c, 0xd2, 0x4f, 0xb0,
        0xd6, 0x96, 0x3f, 0x7d, 0x28, 0xe1, 0x7f, 0x72
    }));

    try$(testCase("message digest", {
        0xf9, 0x6b, 0x69, 0x7d, 0x7c, 0xb7, 0x93, 0x8d,
        0x52, 0x5a, 0x2f, 0x31, 0xaa, 0xf1, 0x61, 0xd0
    }));

    try$(testCase("abcdefghijklmnopqrstuvwxyz", {
        0xc3, 0xfc, 0xd3, 0xd7, 0x61, 0x92, 0xe4, 0x00,
        0x7d, 0xfb, 0x49, 0x6c, 0xca, 0x67, 0xe1, 0x3b
    }));

    try$(testCase("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", {
        0xd1, 0x74, 0xab, 0x98, 0xd2, 0x77, 0xd9, 0xf5,
        0xa5, 0x61, 0x1c, 0x2c, 0x9f, 0x41, 0x9d, 0x9f
    }));

    return Ok();
}

} // namespace Karm::Crypto::Tests